catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
catastrophic_loss(1, 2, 10, 10)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
library(stargazer)
data=read.csv("http://www-bcf.usc.edu/~gareth/ISL/Advertising.csv")
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/",args, sep="")
cat("3", "2")
cat("3", "2", sep="")
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data",lasjdfl;sj, sep=""))
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data","jlasdjf", sep=""))
reg_obj=lm(TV~Sales, data=data)
reg_summary=summary(reg_obj)
#Saving plot as png
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.png")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
#Saving plot as pdf
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/scatterplot-tv-sales.pdf")
plot(data$Sales, data$TV, main="Scatterplot with Regression Line", xlab="Sales", ylab="TV Advertisements")
abline(reg_obj)
dev.off()
save(data, reg_obj,reg_summary, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/regression.RData")
write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
#TV Histogram
tv_summary=summary(data$TV)
cat("TV Summary Statistics\n\n", file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.png")
hist(data$TV)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-tv.pdf")
hist(data$TV)
dev.off()
#Sales Histogram
summary(data$Sales)
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.png")
hist(data$Sales)
dev.off()
pdf("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/images/histogram-sales.pdf")
hist(data$Sales)
dev.off()
#Sales and TV textfiles
sink(file="/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/eda-output.txt")
summary(data$TV)
summary(data$Sales)
sink()
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", c("Advertising.csv"), sep="")
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
z=cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
read.csv(z)
read.csv(c("z"))
read.csv("z")
read.csv(z)
read.csv(z)
z
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(file=cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(as.char(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/"), "Advertising.csv", sep=""))
read.csv(as.character(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/"), "Advertising.csv", sep=""))
read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
)
read.csv(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
class(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
str(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
str(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[1]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[[1]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))[[1]]
toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(toString(cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
read.csv(c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv"))
c("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv")
cat("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv")
pasate("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")
paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep="")[1]
read.csv(paste("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/", "Advertising.csv", sep=""))
data=read.csv("/Users/josephfrancia/Desktop/Advertising.csv")
data=data[,-1]
Regressing Sales on TV Advertising
reg_obj_tv=lm(Sales~TV, data=data)
reg_summary_tv=summary(reg_obj_tv)
#Regressing Sales on Newspaper Advertising
reg_obj_news=lm(Sales~Newspaper, data=data)
reg_summary_news=summary(reg_obj_news)
#Regressing Sales on Radio Advertising
reg_obj_radio=lm(Sales~Radio, data=data)
reg_summary_radio=summary(reg_obj_radio)
#Saving tv plot as png
png(filename="../images/scatterplot-tv-sales.png")
plot(data$TV, data$Sales, main="Scatterplot with Regression Line", xlab="TV Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_tv)
dev.off()
#Saving newspaper plot as png
png(filename="../images/scatterplot-tv-Newspaper.png")
plot(data$Newspaper, data$Sales, main="Scatterplot with Regression Line", xlab="Newspaper Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_news)
dev.off()
#Saving radio plot as png
png(filename="../images/scatterplot-tv-Radio.png")
plot(data$Radio, data$Sales, main="Scatterplot with Regression Line", xlab="Radio Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_radio)
dev.off()
save(data, reg_obj,reg_summary, file="../data/regression.RData")
#write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
save(data, reg_obj_tv, reg_obj_radio, reg_obj_news,reg_summary_news,reg_summary_radio, reg_summary_tv, file="../data/regression.RData")
save(data, reg_obj_tv, reg_obj_radio, reg_obj_news,reg_summary_news,reg_summary_radio, reg_summary_tv, file="../data/regression.RData")
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw03/code")
save(data, reg_obj_tv, reg_obj_radio, reg_obj_news,reg_summary_news,reg_summary_radio, reg_summary_tv, file="../../data/regression.RData")
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw03/code/scripts")
save(corr, file="../../data/correlation-matrix.RData")
args=commandArgs(trailingOnly=TRUE)
data=read.csv(paste("../../data/",args[1], sep=""))
data=data[,-1]
#data=read.csv("/Users/josephfrancia/Desktop/Advertising.csv")
corr=cor(data)
#Newspaper Histogram
png(filename="../../images/histogram-newspaper.png")
hist(data$Newspaper, main="Distribution of Dollar Amount Spent on Newspaper Advertising")
dev.off()
#Radio Histogram
png(filename="../../images/histogram-radio.png")
hist(data$Radio, main="Distribution of Dollar Amount Spent on Radio Advertising")
dev.off()
#TV Histogram
png(filename="../../images/histogram-tv.png")
hist(data$TV, main="Distribution of Dollar Amount Spent on TV Advertising")
dev.off()
#Sales Histogram
png(filename="../../images/histogram-sales.png")
hist(data$Sales, main="Distribution of Sales")
dev.off()
#Pairwise Scatterplot
png(filename="../../images/scatterplot-matrix.png")
pairs(data, main="Scatterplot Matrix")
dev.off()
#eda-output.txt
print("eda-output.txt")
sink(file="../../data/eda-output.txt")
print("TV Advertising Summary Statistics")
summary(data$TV)
print("Radio Summary Statistics")
summary(data$Radio)
print("Newspaper Summary Statistics")
summary(data$Newspaper)
print("Revenue Summary Statistics")
summary(data$Sales)
print("Correlation Matrix")
corr
sink()
#Saving correlation matrix
save(corr, file="../../data/correlation-matrix.RData")
#Regressing Sales on TV Advertising
reg_obj_tv=lm(Sales~TV, data=data)
reg_summary_tv=summary(reg_obj_tv)
#Regressing Sales on Newspaper Advertising
reg_obj_news=lm(Sales~Newspaper, data=data)
reg_summary_news=summary(reg_obj_news)
#Regressing Sales on Radio Advertising
reg_obj_radio=lm(Sales~Radio, data=data)
reg_summary_radio=summary(reg_obj_radio)
#Saving tv plot as png
png(filename="../../images/scatterplot-tv-sales.png")
plot(data$TV, data$Sales, main="Scatterplot with Regression Line", xlab="TV Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_tv)
dev.off()
#Saving newspaper plot as png
png(filename="../../images/scatterplot-tv-Newspaper.png")
plot(data$Newspaper, data$Sales, main="Scatterplot with Regression Line", xlab="Newspaper Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_news)
dev.off()
#Saving radio plot as png
png(filename="../../images/scatterplot-tv-Radio.png")
plot(data$Radio, data$Sales, main="Scatterplot with Regression Line", xlab="Radio Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_radio)
dev.off()
#Multiple Regression
model=lm(Sales~. , data=data)
#Plotting Residuals Against Fitted values
png(filename="../../images/residual-plot.png")
plot(model, which=1)
dev.off()
#Scale-Location Plot
png(filename="../../images/scale-location-plot.png")
plot(model, which=3)
dev.off()
#Normal QQ Plot
png(filename="../../images/normal-qq-plot.png")
plot(model, which=2)
dev.off()
save(data, reg_obj_tv, reg_obj_radio, reg_obj_news,reg_summary_news,reg_summary_radio, reg_summary_tv, file="../../data/regression.RData")
#write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
model
names(model)
model$residuals
(model$residuals)^2
model$residuals
model$residuals*model$residuals
residual_sum_squares=function(lm_object){
return(lm_object$residuals*lm_object$residuals)
}
residual_sum_squares(model)
residual_sum_squares=function(lm_object){
return(sum(lm_object$residuals*lm_object$residuals))
}
residual_sum_squares(model)
model
names(model)
model$terms
model$model
View(data)
data=read.csv("/Users/josephfrancia/Desktop/Advertising.csv")
args=commandArgs(trailingOnly=TRUE)
data=read.csv(paste("../../data/",args[1], sep=""))
data=data[,-1]
#data=read.csv("/Users/josephfrancia/Desktop/Advertising.csv")
corr=cor(data)
#Newspaper Histogram
png(filename="../../images/histogram-newspaper.png")
hist(data$Newspaper, main="Distribution of Dollar Amount Spent on Newspaper Advertising")
dev.off()
#Radio Histogram
png(filename="../../images/histogram-radio.png")
hist(data$Radio, main="Distribution of Dollar Amount Spent on Radio Advertising")
dev.off()
#TV Histogram
png(filename="../../images/histogram-tv.png")
hist(data$TV, main="Distribution of Dollar Amount Spent on TV Advertising")
dev.off()
#Sales Histogram
png(filename="../../images/histogram-sales.png")
hist(data$Sales, main="Distribution of Sales")
dev.off()
#Pairwise Scatterplot
png(filename="../../images/scatterplot-matrix.png")
pairs(data, main="Scatterplot Matrix")
dev.off()
#eda-output.txt
print("eda-output.txt")
sink(file="../../data/eda-output.txt")
print("TV Advertising Summary Statistics")
summary(data$TV)
print("Radio Summary Statistics")
summary(data$Radio)
print("Newspaper Summary Statistics")
summary(data$Newspaper)
print("Revenue Summary Statistics")
summary(data$Sales)
print("Correlation Matrix")
corr
sink()
#Saving correlation matrix
save(corr, file="../../data/correlation-matrix.RData")
Sales on TV Advertising
reg_obj_tv=lm(Sales~TV, data=data)
reg_summary_tv=summary(reg_obj_tv)
#Regressing Sales on Newspaper Advertising
reg_obj_news=lm(Sales~Newspaper, data=data)
reg_summary_news=summary(reg_obj_news)
#Regressing Sales on Radio Advertising
reg_obj_radio=lm(Sales~Radio, data=data)
reg_summary_radio=summary(reg_obj_radio)
#Saving tv plot as png
png(filename="../../images/scatterplot-tv-sales.png")
plot(data$TV, data$Sales, main="Scatterplot with Regression Line", xlab="TV Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_tv)
dev.off()
#Saving newspaper plot as png
png(filename="../../images/scatterplot-tv-Newspaper.png")
plot(data$Newspaper, data$Sales, main="Scatterplot with Regression Line", xlab="Newspaper Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_news)
dev.off()
#Saving radio plot as png
png(filename="../../images/scatterplot-tv-Radio.png")
plot(data$Radio, data$Sales, main="Scatterplot with Regression Line", xlab="Radio Advertising Dollars Spent", ylab="Sales")
abline(reg_obj_radio)
dev.off()
#Multiple Regression
model=lm(Sales~. , data=data)
#Plotting Residuals Against Fitted values
png(filename="../../images/residual-plot.png")
plot(model, which=1)
dev.off()
#Scale-Location Plot
png(filename="../../images/scale-location-plot.png")
plot(model, which=3)
dev.off()
#Normal QQ Plot
png(filename="../../images/normal-qq-plot.png")
plot(model, which=2)
dev.off()
save(data, reg_obj_tv, reg_obj_radio, reg_obj_news,reg_summary_news,reg_summary_radio, reg_summary_tv, file="../../data/regression.RData")
#write.csv(data, file="/Users/josephfrancia/desktop/Fall_2016/Stats159/stat159-fall2016-hw02/data/Advertising.csv")
model$model
model$model$Sales
total_sum_squares=function(lm_object){
sum((lm_object$model-mean(lm_object$model[,1]))^2)
}
total_sum_squares(model)
r_squared=function(lm_object){
return(1-(residual_sum_squares(lm_object)/total_sum_squares(lm_object)))
}
r_squared(model)
r_squared(reg_obj_tv)
r_squared(reg_obj_radio)
r_squared(reg_obj_news)
ncol(model$model-1)
View(model$model)
ncol(model$model)-1
f_statistic=function(lm_object){
numerator=(total_sum_squares(lm_object)-residual_sum_squares(lm_object))/(ncol(lm_object$model)-1)
denominator=(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model)-1)
return(numerator/denominator)
}
f_statistic=function(lm_object){
numerator=(total_sum_squares(lm_object)-residual_sum_squares(lm_object))/(ncol(lm_object$model)-1)
denominator=(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model)-1))
return(numerator/denominator)
}
f_statistic(model)
numerator=(total_sum_squares(model)-residual_sum_squares(model))/(ncol(lm_object$model)-1)
numerator=(total_sum_squares(model)-residual_sum_squares(model))/(ncol(model$model)-1)
numerator
nrow(model$model)-ncol(model$model)
residual_sum_squares(model)/195
residual_sum_squares(model)
f_statistic(model)*2
f_statistic(model)*2.85
f_statistic=function(lm_object){
numerator=(total_sum_squares(lm_object)-residual_sum_squares(lm_object))/(ncol(lm_object$model)-1)
denominator=(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model)-1))
return(numerator/denominator)
}
residual_sum_squares=function(lm_object){
return(sum(lm_object$residuals*lm_object$residuals))
}
total_sum_squares=function(lm_object){
sum((lm_object$model-mean(lm_object$model[,1]))^2)
}
r_squared=function(lm_object){
return(1-(residual_sum_squares(lm_object)/total_sum_squares(lm_object)))
}
f_statistic=function(lm_object){
numerator=(total_sum_squares(lm_object)-residual_sum_squares(lm_object))/(ncol(lm_object$model)-1)
denominator=(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model)-1))
return(numerator/denominator)
}
residual_std_error=function(lm_object){
return(sqrt(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model)-1)))
}
residual_std_error(model)
data(mtcars)
source("../functions/regression-functions.R")
test_that("residual_sum_squares outputs correct RSS", {
expect_equal(residual_sum_squares(reg), sum(reg$residuals^2))
})
library(testthat)
context("Test residual_sum_squares function")
test_that("residual_sum_squares outputs correct RSS", {
expect_equal(residual_sum_squares(reg), sum(reg$residuals^2))
})
data(mtcars)
reg=lm(mpg~disp+hp, data=mtcars)
regsum=summary(reg)
source("../functions/regression-functions.R")
context("Test residual_sum_squares function")
test_that("residual_sum_squares outputs correct RSS", {
expect_equal(residual_sum_squares(reg), sum(reg$residuals^2))
})
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw03/code/tests")
test_file(test-regression.R)
test_file("test-regression.R")
context("Test total_sum_squares function")
test_that("total_sum_squares outputs correct TSS", {
expect_equal(total_sum_squares(reg), sum((mtcars$mpg-mean(mtcars$mpg))^2))
})
context("Test residual_sum_squares function")
test_that("residual_sum_squares outputs correct RSS", {
expect_equal(residual_sum_squares(reg), sum(reg$residuals^2))
})
context("Test total_sum_squares function")
test_that("total_sum_squares outputs correct TSS", {
expect_equal(total_sum_squares(reg), sum((mtcars$mpg-mean(mtcars$mpg))^2))
})
sum((mtcars$mpg-mean(mtcars$mpg))^2)
total_sum_squares(reg)
reg$model
View(mtcars)
sum((mtcars$mpg-mean(mtcars$mpg))^2)
sum((reg$model-mean(reg$model))^2)
reg$model
sum((reg$model[,1]-mean(reg$model[,1]))^2)
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-hw03/code/tests")
#test_file("test-regression.R")
data(mtcars)
reg=lm(mpg~disp+hp, data=mtcars)
regsum=summary(reg)
source("../functions/regression-functions.R")
context("Test residual_sum_squares function")
test_that("residual_sum_squares outputs correct RSS", {
expect_equal(residual_sum_squares(reg), sum(reg$residuals^2))
})
context("Test total_sum_squares function")
test_that("total_sum_squares outputs correct TSS", {
expect_equal(total_sum_squares(reg), sum((mtcars$mpg-mean(mtcars$mpg))^2))
})
test_file("test-regression.R")
context("Test r_squared function")
test_that("r_squared outputs correct R^2 value", {
expect_equal(r_squared(reg), regsum$r.squared)
})
context("Test residual_std_error function")
test_that("r_squared outputs correct R^2 value", {
expect_equal(residual_std_error(reg), regsum$sigma)
})
residual_std_error=function(lm_object){
return(sqrt(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model))))
}
source("../functions/regression-functions.R")
context("Test residual_std_error function")
test_that("r_squared outputs correct R^2 value", {
expect_equal(residual_std_error(reg), regsum$sigma)
})
context("Test f_statistic function")
test_that("f_statistic outputs correct F  value", {
expect_equal(f_statistic(reg), regsum$fstatistic[1])
})
f_statistic(reg)
regsum$fstatistic[1]
context("Test f_statistic function")
test_that("f_statistic outputs correct F  value", {
expect_equal(f_statistic(reg), regsum$fstatistic[1])
})
f_statistic(reg)
source("../functions/regression-functions.R")
source("../functions/regression-functions.R")
f_statistic(reg)
f_statistic=function(lm_object){
numerator=(total_sum_squares(lm_object)-residual_sum_squares(lm_object))/(ncol(lm_object$model)-1)
denominator=(residual_sum_squares(lm_object)/(nrow(lm_object$model)-ncol(lm_object$model)))
return(numerator/denominator)
}
context("Test f_statistic function")
test_that("f_statistic outputs correct F  value", {
expect_equal(f_statistic(reg), regsum$fstatistic[1])
})
f_statistic(reg)
regsum$fstatistic[1]
context("Test f_statistic function")
test_that("f_statistic outputs correct F  value", {
expect_equal(f_statistic(reg), as.numeric(regsum$fstatistic[1]))
})
